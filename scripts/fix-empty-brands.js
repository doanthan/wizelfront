/**
 * Fix Script: Fix brands with "EMPTY" names
 */

import connectToDatabase from '../lib/mongoose.js';
import BrandSettings from '../models/Brand.js';
import Store from '../models/Store.js';

async function fixEmptyBrands() {
  try {
    await connectToDatabase();
    console.log('✅ Connected to database\n');

    // Find brands with EMPTY in name or slug
    const emptyBrands = await BrandSettings.find({
      $or: [
        { name: { $in: ['EMPTY', '', null] } },
        { brandName: { $in: ['EMPTY', '', null] } },
        { slug: { $in: ['EMPTY', '', null] } }
      ]
    });

    console.log(`Found ${emptyBrands.length} brands with empty/invalid names\n`);

    for (const brand of emptyBrands) {
      try {
        // Get the store to use its name as fallback
        const store = await Store.findById(brand.store_id);
        const storeName = store ? store.name : 'Default Brand';

        // Update the brand
        brand.name = storeName;
        brand.brandName = storeName;
        brand.slug = undefined; // Will be regenerated by pre-save hook

        // Fix invalid brandFontColor if needed
        if (!brand.brandFontColor || !/^#[0-9A-F]{6}$/i.test(brand.brandFontColor)) {
          brand.brandFontColor = '#000000';
        }

        // Ensure required fields have defaults
        if (!brand.primaryColor || brand.primaryColor.length === 0) {
          brand.primaryColor = [{ hex: '#000000', name: 'Black' }];
        }

        if (!brand.buttonTextColor) {
          brand.buttonTextColor = '#FFFFFF';
        }

        if (!brand.emailFallbackFont) {
          brand.emailFallbackFont = 'Arial';
        }

        await brand.save();

        console.log(`✅ Fixed brand for store ${brand.store_public_id}`);
        console.log(`   - New name: "${brand.name}"`);
        console.log(`   - New slug: "${brand.slug}"`);
        console.log('');
      } catch (err) {
        console.error(`❌ Error fixing brand ${brand._id}:`, err.message);
      }
    }

    console.log('✨ Done!');
    process.exit(0);
  } catch (error) {
    console.error('Error:', error);
    process.exit(1);
  }
}

fixEmptyBrands();
